--view dataset--

SELECT *
FROM CopyofCopyofIMDBTop250MoviesCleanedIMDBTop250Movies

--change table name--
ALTER TABLE CopyofCopyofIMDBTop250MoviesCleanedIMDBTop250Movies RENAME to Movies

--top 5 budgeted movies--
 SELECT name, budget
 from Movies
 ORDER BY budget DESC
 limit 5
 
 --Princess Mononoke update--
 UPDATE Movies
 SET budget = REPLACE(budget,2400000000, 23500000)
 
--3 idiots update--
UPDATE Movies
 SET budget = REPLACE(budget,550000000, 6700000)
 
 -- updated top 5 budgeted movies--
  SELECT name, budget
 from Movies
 ORDER BY budget DESC
 limit 5
 
 --top 5 rated movies--
  SELECT name, rating
 from Movies
 ORDER BY rating DESC
 limit 5
 
 --top 5 box office hits--
 SELECT name, box_office
 from Movies
 ORDER BY box_office DESC
 limit 5
 
 --top 10 highest profit--
 select name, box_office, budget, (box_office - budget) AS profit
 FROM Movies
 order by profit DESC
 limit 10
 
 --lowest profit--
  select name, box_office, budget, (box_office - budget) AS profit
 FROM Movies
 order by profit
 limit 10
 
 --most popular genres--
 SELECT genre, COUNT(*) as genre_count
 FROM (
   SELECT trim(value) AS genre
   from Movies
   cross JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
   )
   GROUP BY genre
   ORDER BY genre_count DESC
   limit 5
   
   --how many movies are in each rating category--
Select certificate, count(*) AS total
FROM Movies
group by certificate 
order by total DESC

 --top 10 directors--
 SELECT directors, COUNT(*) AS Number_of_movies
 FROM Movies
 GROUP BY directors
 ORDER BY COUNT(*) DESC
 Limit 10
 
  --Best years for movies--
 SELECT year, COUNT(year) AS Number_of_Movies_Per_Year
 FROM Movies
 GROUP BY year
 ORDER BY COUNT(year) DESC
 Limit 10
 
 --how many movies in each decade--

SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start


**For visualization purposes it makes sense to keep the decade in one column so combining them utilizing the concat function gives us the ability 

SELECT
    decade_start || ' - ' || decade_end as decade,
    COUNT(year) as number_of_movies
FROM (
    SELECT 
        (year/10) * 10 + 1 as decade_start,
        (year/10) * 10 + 10 as decade_end,
        year
    FROM Movies
) AS subquery
GROUP BY decade_start
ORDER BY decade_start

 --most popular movie genre in each decade--
WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      year/10 * 10 + 1 AS decade_start,
      year/10 * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start

** as with the previous query for visualization purposes let's combine the decade_start and decade_end into 1 column 

WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT 
    d.decade_start || ' - ' || d.decade_end AS decade,
    gc.genre,
    ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      (year/10) * 10 + 1 AS decade_start,
      (year/10) * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade
